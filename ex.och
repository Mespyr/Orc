import "std.och"

##### STACK OPERATIONS #####
# expr: defines new stack operations.
expr swp   (a b) = b a
expr dup   (a) = a a
expr pop   (a) =
expr under (a b) = b a b
############################

######## TYPES ########
# type: defines a new type which
#       has its own members.
type Vec2 =
  :x I64
  :y I64
# types: members can be read using
#        `:` followed by the member name.
fn combine (^Vec2) [I64] =
  dup :x swp :y +
# types: members can be set with `@` followed
#        by the member name.
#        you can create a new instance of a type
#        using the `new` keyword.
fn group(I64 I64) [^Vec2] =
  new(Vec2) under @y
  under @x
# types: methods can be made. `this` keyword
#        pushes the instance which the method is
#        being called from onto the stack.
fn Vec2.set (I64 I64) =
  this under @y @x
#######################

##### GENERICS & CAST #####
# generics: similar to C++ templates
type Node<T> =
  :next ^Node<T>
  :data T
# generics: can also be used on functions.
# cast: cast any type on the stack to another
fn NULL<T> [^T] = 0 cast(^T)
fn NULL2<T U> [^T ^U] = NULL<T> NULL<U>
###########################

######### CONDITIONS #########
# case: a mix of `switch` and `if` statements
#       from other languages.
fn fizzbuzz (I64) =
  case
  (dup 15 % 0 eq) pop "FizzBuzz\n" print
  (dup 3 % 0 eq)  pop "Fizz\n" print
  (dup 5 % 0 eq)  pop "Buzz\n" print
  else dump end
# `?`: if the top value on the stack is true,
#      it continues executing the function. if
#      not, it returns from the function.
fn fib (U64) [U64] = dup 1 gre?
  dup 1 - fib
  swp 2 - fib +
##############################

##### FUNCTIONS ON THE STACK #####
# ???: this is our test function.
fn test (I64) [I64] = 12 +
# arguments: you can pass functions as
#            arguments using `Function`
#            and describing the signature.
# callfn: keyword to call the function on
#         the top of the stack.
fn caller(I64 Function(I64)[I64]) [I64] =
  swp 1 + swp callfn
# pushfn: pushes functions onto the stack
fn run (I64) = pushfn(test) caller dump
##################################

#### BIND ####
# bind: takes values off of the stack
#       and binds them to words, which
#       when referenced, are pushed onto
#       the stack.
fn bindfn (I64) =
  bind (n)
  n 1 + dump
  n n + dump
##############

######## WHILE LOOPS ########
# while: similar to other languages.
#        condition goes inside parentheses.
#        any valid ochre code can go inside.
fn main =
  0 while (dup 15 les)
    dup run
    1 +
  end
#############################
