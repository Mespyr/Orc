fun mod(i64 i64) [i64] / swp pop end
fun sq(i64) [i64] dup * end

fun ?prime(i64) [i64]
	# stack: is_prime, num, idx
	1 swp # is_prime
	2     # idx

	# if number is not less than 2, skip to beginning of loop
	over over < cjmpf loop
	# set 'is_prime' to 0 and skip loop
	rot pop 0
	rot rot
	jmpe loop

	loop:
		over over sq > cjmpef loop # while 'num' is greater than 'idx**2' stay in loop

		if_lab: # if number is not divisible by 'idx' skip this label
			# check if modulo is equal to 0 and skip if not
			over over mod 0 = cjmpef if_lab
			# set 'is_prime' to 0
			rot pop 0
			rot rot
			jmpe loop
		end

		1 + jmp loop
	end

	pop pop
end

fun main()
	1 loop:
		# stay in loop until greater or equal to 1000
		dup 10000 < cjmpef loop

		print_prime: # skip section if number is not prime
			dup ?prime cjmpef print_prime
			dup dump
		end
	
		1 + jmp loop
	end pop
end
