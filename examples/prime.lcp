fun mod(i64 i64) [i64] / swp pop end
fun sq(i64) [i64] dup * end

fun ?prime(i64) [i64]
	i64 is_prime
	1 @is_prime
	2 # stack: num, idx

	over 2 < cjmpf loop # if num is not less than 2, then continue to loop
	0 @is_prime # number is not prime
	jmpe loop

	loop:
		over over sq > cjmpef loop # while 'num' is greater than 'idx**2' stay in loop

		if_lab: # if number is not divisible by 'idx' skip this label
			over over mod 0 = cjmpef if_lab
			0 @is_prime
			jmpe loop
		end

		1 + jmp loop
	end

	pop pop
	&is_prime
end

fun main()
	1 loop:
		# stay in loop until greater or equal to 1000
		dup 10000 < cjmpef loop

		print_prime: # skip section if number is not prime
			dup ?prime cjmpef print_prime
			dup dump
		end
	
		1 + jmp loop
	end pop
end
