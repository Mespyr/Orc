# some basic stack manipulation
expr dup  (a -> a a)
expr swp  (a b -> b a)
expr over (a b -> a b a)
expr pop  (a ->)
expr 2pop (a b ->)

# little math
fn dec (u64 -> u64) = { 1 - }
fn inc (u64 -> u64) = { 1 + }
fn sq (u64 -> u64) = { dup * }

# basic IO
extern puts (string)
extern puti (i64)
fn dotnl = { "\n" puts }
fn putln (string) =
  { puts dotnl }
fn putln (i64) =
  { puti dotnl }

# loop through numbers
# without using a while loop
type Range = {
  cur:  i64
  end:  i64
  step: i64

  fn next (-> i64) = { this.cur this.step + this:cur }
  fn eof (-> bool) = { this.cur this.end >eq }
  fn iter ((i64)) =
    while (this.eof not) { this.next over call }
}
fn iter ((i64) i64 i64) = { 1 Range.iter }
