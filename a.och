import "std.och"

# generics + types
type Node<T> =
  next: ^Node<T>
  data: T

type LinkedList<T> =
  size: Int
  head: Node<T>

# datatype members
fn LinkedList.init = 0 @self.size
fn LinkedList.print =
  &self.head 0
  while (dup &self.size <)
    swp dup &Node.data dump
    &Node.next swp 1 +
  end

# generics on functions + cast
fn NULL<T> = 0 cast(^T)

# conditions
fn cmp(Int) =
  if (dup 1 eq?) "one\n"
     (dup 2 eq?) "two\n"
  else "idk\n";
  print pop

# passing functions as arguments
fn test(Int) [Int] = 12 +
fn caller( Function(Int)[Int] ) [Int] =
  12 swp callfn # calling functions on stack

# const values
const ARRAY_SIZE = 10 2 *

fn main =
  list: LinkedList<Int> # variables + more generics
  list.init             # variable members
  new(Node) delete      # heap allocated data

  func: Function(Int)[Int] # function variables
  pushfn(test) @func       # pushing functions to stack
  &func caller dump

  c: Char 'A' @c    # Characters: `Char`
  1 c 1 1 call3 pop # Syscalls

  arr: Array(Int ARRAY_SIZE) # Arrays (decay to ^Type when pushed to stack)
  400 0 &arr Array-set       # set index of array to value
  950 1 &arr Array-set       # stack: Value, Index, Array(ptr decay)
  1 &arr Array-at            # Get value at index

  # syntax allows for crazy shit
  # should stop at five
  0 while (dup if (dup 2 % 0 eq?) 10 else 5; <)
    dup dump 1 +
  end pop
