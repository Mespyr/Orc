expr dup :: a -> a a
expr swp :: a b -> b a

extern fn putf64 :: F64
extern fn puti   :: I64
extern fn sqrt   :: F64 -> F64 # link with `-lm`

fn abs[T] :: T -> T = dup 0 < if [ -1 * ]
fn sq[T]  :: T -> T = dup *

type Vec2[T] =
  :x T
  :y T

fn Vec2[T].set :: T T =
  this @y this @x

fn distance :: ^Vec2[F64] ^Vec2[F64] -> F64 =
  bind (P1 P2)
  P2:x P1:x - sq[F64]
  P2:y P1:y - sq[F64] + sqrt

fn main =
  new(Vec2[F64] Vec2[F64])
  bind (P1 P2)
  1.2 2.7 P1.set
  4.2 6.9 P2.set

  P1 P2 distance putf64
  -10 abs[I64] puti
